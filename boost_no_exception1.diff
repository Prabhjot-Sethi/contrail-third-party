diff --git a/third_party/boost_1_48_0/boost/thread/locks.hpp b/third_party/boost_1_48_0/boost/thread/locks.hpp
index e69de29..c09964d 100644
--- a/third_party/boost_1_48_0/boost/thread/locks.hpp
+++ b/third_party/boost_1_48_0/boost/thread/locks.hpp
@@ -407,7 +407,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             m->lock();
             is_locked=true;
@@ -416,7 +420,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             is_locked=m->try_lock();
             return is_locked;
@@ -442,7 +450,11 @@
         {
             if(!owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             m->unlock();
             is_locked=false;
@@ -650,7 +662,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             m->lock_shared();
             is_locked=true;
@@ -659,7 +675,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             is_locked=m->try_lock_shared();
             return is_locked;
@@ -668,7 +688,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             is_locked=m->timed_lock_shared(target_time);
             return is_locked;
@@ -678,7 +702,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             is_locked=m->timed_lock_shared(target_time);
             return is_locked;
@@ -687,7 +715,11 @@
         {
             if(!owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             m->unlock_shared();
             is_locked=false;
@@ -847,7 +879,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             m->lock_upgrade();
             is_locked=true;
@@ -856,7 +892,11 @@
         {
             if(owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             is_locked=m->try_lock_upgrade();
             return is_locked;
@@ -865,7 +905,11 @@
         {
             if(!owns_lock())
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(boost::lock_error());
+#else
+                assert(0);
+#endif
             }
             m->unlock_upgrade();
             is_locked=false;
diff --git a/third_party/boost_1_48_0/boost/thread/pthread/condition_variable_fwd.hpp b/third_party/boost_1_48_0/boost/thread/pthread/condition_variable_fwd.hpp
index e69de29..c09964d 100644
--- a/third_party/boost_1_48_0/boost/thread/pthread/condition_variable_fwd.hpp
+++ b/third_party/boost_1_48_0/boost/thread/pthread/condition_variable_fwd.hpp
@@ -32,13 +32,21 @@
             int const res=pthread_mutex_init(&internal_mutex,NULL);
             if(res)
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(thread_resource_error());
+#else
+                assert(0);
+#endif
             }
             int const res2=pthread_cond_init(&cond,NULL);
             if(res2)
             {
                 BOOST_VERIFY(!pthread_mutex_destroy(&internal_mutex));
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(thread_resource_error());
+#else
+                assert(0);
+#endif
             }
         }
         ~condition_variable()
diff --git a/third_party/boost_1_48_0/boost/thread/pthread/condition_variable.hpp b/third_party/boost_1_48_0/boost/thread/pthread/condition_variable.hpp
index e69de29..c09964d 100644
--- a/third_party/boost_1_48_0/boost/thread/pthread/condition_variable.hpp
+++ b/third_party/boost_1_48_0/boost/thread/pthread/condition_variable.hpp
@@ -57,7 +57,11 @@
         this_thread::interruption_point();
         if(res)
         {
+#ifndef BOOST_NO_EXCEPTIONS
             boost::throw_exception(condition_error());
+#else
+            assert(0);
+#endif
         }
     }
 
diff --git a/third_party/boost_1_48_0/boost/thread/pthread/mutex.hpp b/third_party/boost_1_48_0/boost/thread/pthread/mutex.hpp
index e69de29..c09964d 100644
--- a/third_party/boost_1_48_0/boost/thread/pthread/mutex.hpp
+++ b/third_party/boost_1_48_0/boost/thread/pthread/mutex.hpp
@@ -39,7 +39,11 @@
             int const res=pthread_mutex_init(&m,NULL);
             if(res)
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(thread_resource_error());
+#else
+                assert(0);
+#endif
             }
         }
         ~mutex()
@@ -52,7 +56,11 @@
             int const res=pthread_mutex_lock(&m);
             if(res)
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(lock_error(res));
+#else
+                assert(0);
+#endif
             }
         }
 
@@ -66,7 +74,11 @@
             int const res=pthread_mutex_trylock(&m);
             if(res && (res!=EBUSY))
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(lock_error(res));
+#else
+                assert(0);
+#endif
             }
             
             return !res;
@@ -101,14 +113,22 @@
             int const res=pthread_mutex_init(&m,NULL);
             if(res)
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(thread_resource_error());
+#else
+                assert(0);
+#endif
             }
 #ifndef BOOST_PTHREAD_HAS_TIMEDLOCK
             int const res2=pthread_cond_init(&cond,NULL);
             if(res2)
             {
                 BOOST_VERIFY(!pthread_mutex_destroy(&m));
+#ifndef BOOST_NO_EXCEPTIONS
                 boost::throw_exception(thread_resource_error());
+#else
+                assert(0);
+#endif
             }
             is_locked=false;
 #endif
diff --git a/third_party/boost_1_48_0/boost/thread/pthread/thread_data.hpp b/third_party/boost_1_48_0/boost/thread/pthread/thread_data.hpp
index e69de29..c09964d 100644
--- a/third_party/boost_1_48_0/boost/thread/pthread/thread_data.hpp
+++ b/third_party/boost_1_48_0/boost/thread/pthread/thread_data.hpp
@@ -83,11 +83,13 @@
 
             void check_for_interruption()
             {
+#ifndef BOOST_NO_EXCEPTIONS
                 if(thread_info->interrupt_requested)
                 {
                     thread_info->interrupt_requested=false;
                     throw thread_interrupted();
                 }
+#endif
             }
             
             void operator=(interruption_checker&);
