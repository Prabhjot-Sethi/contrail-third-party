diff --git a/third_party/libtask/task.c b/third_party/libtask/task.c
index 591050d..d612ba6 100644
--- a/third_party/libtask/task.c
+++ b/third_party/libtask/task.c
@@ -3,6 +3,7 @@
 #include "taskimpl.h"
 #include <fcntl.h>
 #include <stdio.h>
+#include <pthread.h>
 
 int	taskdebuglevel;
 int	taskcount;
@@ -16,6 +17,8 @@ Tasklist	taskrunqueue;
 Task	**alltask;
 int		nalltask;
 
+pthread_mutex_t lock_all_task;
+
 static char *argv0;
 static	void		contextswitch(Context *from, Context *to);
 
@@ -79,9 +82,6 @@ static Task*
 taskalloc(void (*fn)(void*), void *arg, uint stack)
 {
 	Task *t;
-	sigset_t zero;
-	uint x, y;
-	ulong z;
 
 	/* allocate the task and stack together */
 	t = malloc(sizeof *t+stack);
@@ -94,8 +94,18 @@ taskalloc(void (*fn)(void*), void *arg, uint stack)
 	t->stksize = stack;
 	t->id = ++taskidgen;
 	t->startfn = fn;
+    t->context_inited = 0;
 	t->startarg = arg;
 
+	return t;
+}
+
+static void
+taskcontextinit(Task *t) {
+	sigset_t zero;
+	uint x, y;
+	ulong z;
+
 	/* do a reasonable initialization */
 	memset(&t->context.uc, 0, sizeof t->context.uc);
 	sigemptyset(&zero);
@@ -129,8 +139,7 @@ taskalloc(void (*fn)(void*), void *arg, uint stack)
 	z >>= 16;	/* hide undefined 32-bit shift from 32-bit compilers */
 	x = z>>16;
 	makecontext(&t->context.uc, (void(*)())taskstart, 2, y, x);
-
-	return t;
+    t->context_inited = 1;
 }
 
 int
@@ -143,14 +152,18 @@ taskcreate(void (*fn)(void*), void *arg, uint stack)
 	taskcount++;
 	id = t->id;
 	if(nalltask%64 == 0){
+        pthread_mutex_lock(&lock_all_task);
 		alltask = realloc(alltask, (nalltask+64)*sizeof(alltask[0]));
 		if(alltask == nil){
 			fprint(2, "out of memory\n");
 			abort();
 		}
+        pthread_mutex_unlock(&lock_all_task);
 	}
 	t->alltaskslot = nalltask;
+    pthread_mutex_lock(&lock_all_task);
 	alltask[nalltask++] = t;
+    pthread_mutex_unlock(&lock_all_task);
 	taskready(t);
 	return id;
 }
@@ -175,7 +188,9 @@ void
 taskready(Task *t)
 {
 	t->ready = 1;
+    pthread_mutex_lock(&lock_all_task);
 	addtask(&taskrunqueue, t);
+    pthread_mutex_unlock(&lock_all_task);
 }
 
 int
@@ -219,7 +234,7 @@ contextswitch(Context *from, Context *to)
 	}
 }
 
-static void
+void
 taskscheduler(void)
 {
 	int i;
@@ -229,16 +244,22 @@ taskscheduler(void)
 	for(;;){
 		if(taskcount == 0)
 			exit(taskexitval);
+        pthread_mutex_lock(&lock_all_task);
 		t = taskrunqueue.head;
+        pthread_mutex_unlock(&lock_all_task);
 		if(t == nil){
 			fprint(2, "no runnable tasks! %d tasks stalled\n", taskcount);
 			exit(1);
 		}
+        pthread_mutex_lock(&lock_all_task);
 		deltask(&taskrunqueue, t);
+        pthread_mutex_unlock(&lock_all_task);
 		t->ready = 0;
 		taskrunning = t;
 		tasknswitch++;
 		taskdebug("run %d (%s)", t->id, t->name);
+        if (t->context_inited == 0)
+            taskcontextinit(t);
 		contextswitch(&taskschedcontext, &t->context);
 //print("back in scheduler\n");
 		taskrunning = nil;
@@ -246,8 +267,10 @@ taskscheduler(void)
 			if(!t->system)
 				taskcount--;
 			i = t->alltaskslot;
+            pthread_mutex_lock(&lock_all_task);
 			alltask[i] = alltask[--nalltask];
 			alltask[i]->alltaskslot = i;
+            pthread_mutex_unlock(&lock_all_task);
 			free(t);
 		}
 	}
@@ -321,7 +344,9 @@ taskinfo(int s)
 
 	fprint(2, "task list:\n");
 	for(i=0; i<nalltask; i++){
+        pthread_mutex_lock(&lock_all_task);
 		t = alltask[i];
+        pthread_mutex_unlock(&lock_all_task);
 		if(t == taskrunning)
 			extra = " (running)";
 		else if(t->ready)
@@ -350,7 +375,7 @@ taskmainstart(void *v)
 }
 
 int
-main(int argc, char **argv)
+Run(int argc, char **argv)
 {
 	struct sigaction sa, osa;
 
diff --git a/third_party/libtask/task.h b/third_party/libtask/task.h
index 1bac52d..adbaf27 100644
--- a/third_party/libtask/task.h
+++ b/third_party/libtask/task.h
@@ -33,6 +33,8 @@ void		tasksystem(void);
 unsigned int	taskdelay(unsigned int);
 unsigned int	taskid(void);
 
+void taskscheduler(void);
+
 struct Tasklist	/* used internally */
 {
 	Task	*head;
diff --git a/third_party/libtask/taskimpl.h b/third_party/libtask/taskimpl.h
index 02d48de..c9ee8e9 100644
--- a/third_party/libtask/taskimpl.h
+++ b/third_party/libtask/taskimpl.h
@@ -167,6 +167,7 @@ struct Task
 	int	alltaskslot;
 	int	system;
 	int	ready;
+   int context_inited;
 	void	(*startfn)(void*);
 	void	*startarg;
 	void	*udata;
diff --git a/third_party/libtask/testdelay.c b/third_party/libtask/testdelay.c
index 7974cb0..bd94ba7 100644
--- a/third_party/libtask/testdelay.c
+++ b/third_party/libtask/testdelay.c
@@ -3,7 +3,7 @@
 #include <errno.h>
 #include <unistd.h>
 #include <stdlib.h>
-#include <task.h>
+#include "task.h"
 
 enum { STACK = 32768 };
 
